{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to David's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: David Ona</li> <li>Reviewer: Thomas Roche</li> </ul>"},{"location":"tutorials/go-setup/#introduction","title":"Introduction","text":"<p>This is a brief tutorial about how to write a \"Hello COMP 423\" program in Go using a dev container for setup.</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install Visual Studio Code</li> <li>Install the Dev Containers Extension through the VS Code Extensions tab.</li> <li>Install Docker</li> </ul>"},{"location":"tutorials/go-setup/#creating-a-dev-container-for-go","title":"Creating a Dev Container for Go","text":""},{"location":"tutorials/go-setup/#create-a-new-project-directory","title":"Create a new project directory.","text":"<p>In VS Code, open a new terminal and run the following commands:</p> <pre><code>mkdir &lt;your-project-name&gt;\ncd &lt;your-project-name&gt;\n</code></pre>"},{"location":"tutorials/go-setup/#initialize-a-git-repository","title":"Initialize a Git repository:","text":"<p>Run:</p> <p><code>git init</code></p>"},{"location":"tutorials/go-setup/#create-a-remote-repository-on-github","title":"Create a Remote Repository on GitHub:","text":"<p>1) Log Into GitHub and navigate to the Create a New Repository page</p> <p>2) Fill in the details:</p> <ul> <li>Repository Name</li> <li>Description</li> <li>Visibility</li> </ul> <p>3) Click Create Repository</p>"},{"location":"tutorials/go-setup/#link-your-local-repository-to-github","title":"Link your local Repository to GitHub","text":"<p>1) Add the GitHub repository as a remote:</p> <p><code>git remote add origin https://github.com/&lt;your-username&gt;/&lt;repo-name&gt;</code></p> <p>2) Push your local commits to the GitHub repository:</p> <p><code>git push --set-upstream origin main</code></p>"},{"location":"tutorials/go-setup/#configure-the-dev-container","title":"Configure the Dev Container","text":"<p>Create a .devcontainer folder:</p> <p><code>mkdir .devcontainer</code></p> <p>Inside .devcontainer, create a devcontainer.json file, and add the following content to devcontainer.json:</p> <pre><code>{\n    \"name\": \"Go Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:1.23\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\"golang.go\"]\n        }\n    }\n}\n</code></pre> <p>Warning</p> <p>Make sure your indentations are correct, and you remember all those commas! If your syntax is incorrect, your dev container will not work properly.</p>"},{"location":"tutorials/go-setup/#dev-container-configuration-explanation","title":"Dev Container Configuration Explanation","text":"<ul> <li>name: The name of your container.</li> <li>image: This tells the container which Docker image to use. Here, we use the latest version of Go.</li> <li>customizations: Adds useful configurations to VS Code. Here, we install the Go extension for VS Code.</li> </ul> <p>No Go download needed!</p> <p>Because we are using a dev container, there is no need to install Go directly on your local machine!</p>"},{"location":"tutorials/go-setup/#open-the-project-in-the-dev-container","title":"Open the Project in the Dev Container","text":"<p>Reopen the project in the container by pressing Ctrl+Shift+P (or Cmd+Shift+P on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option. This may take a few mintues while the image is downloaded and the requirements are installed.</p> <p>Once the projected is reopened in the container, write the following in the terminal to verify that Go has been installed and that your version is up to date:</p> <p><code>go version</code></p> <p>Initialize the Go Module with the following terminal command:</p> <p><code>go mod init hello-go</code></p> <p>This tracks the projects dependencies.</p>"},{"location":"tutorials/go-setup/#write-the-hello-423-program","title":"Write the Hello 423 Program!","text":"<p>Create a new file named main.go in the root of your project. Then, write the following code:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre> <p>This is your Go code. In this code, you:</p> <ul> <li>Declare a main package (a package is a way to group functions, and it's made up of all the files in the same directory).</li> <li>Import the fmt package which contains functions for formatting text, including printing to the console.</li> <li>Implement a main function to print a message to the console. A main function exectues by default when you run the main package.</li> </ul>"},{"location":"tutorials/go-setup/#run-your-code","title":"Run your code!","text":"<p>Use the following command in your terminal:</p> <pre><code>go run .\n</code></pre> <p>The run command compiles and runs your code in a single step.</p>"},{"location":"tutorials/go-setup/#build-your-code","title":"Build your code.","text":"<p>This is another way to run your code by compiling it and running it in two separate steps. Use the go build terminal command to compile your program:</p> <p><code>go build -o hello423</code></p> <p>Then, run the program directly with:</p> <p><code>./hello423</code></p> <p>The build command is similar to the gcc command from COMP211. Both commands take a source code file as input and produce an executable file as output that you can then run. You can name the output executable with the argument after -o. The command <code>go run</code> compiles and runs the program in one step, but <code>go build</code> produces a standalone executable file.</p>"},{"location":"tutorials/go-setup/#commit-your-work","title":"Commit your work.","text":"<p>Add all files to the Git repository:</p> <p><code>git add .</code></p> <p>Commit your changes:</p> <p><code>git commit -m &lt;your meaningful commit message&gt;</code></p>"},{"location":"tutorials/go-setup/#works-cited","title":"Works Cited","text":"<ul> <li>Go \"Getting Started\" Tutorial</li> <li>COMP423 MkDocs Tutorial</li> <li>MkDocs Code Blocks Documentation</li> <li>Microsoft Go Image</li> </ul>"}]}